Case Study Questions
This case study has LOTS of questions - they are broken up by area of focus including:

Pizza Metrics
Runner and Customer Experience
Ingredient Optimisation
Pricing and Ratings
Bonus DML Challenges (DML = Data Manipulation Language)
Each of the following case study questions can be answered using a single SQL statement.

Again, there are many questions in this case study - please feel free to pick and choose which ones youâ€™d like to try!

Before you start writing your SQL queries however - you might want to investigate the data, you may want to do something with some of those null values 
and data types in the customer_orders and runner_orders tables!

A. Pizza Metrics:
-----------------
1. How many pizzas were ordered?
	select count(order_id) from pizza_runner.customer_orders;

2. How many unique customer orders were made?
	select count(distinct(customer_id)) from customer_orders;
	
3. How many successful orders were delivered by each runner?
	select runner_id, count(runner_id) 
	from pizza_runner.runner_orders 
	group by runner_id
	order by runner_id;
	
4. How many of each type of pizza was delivered?
	select p.pizza_name, count(c.pizza_id)
	from pizza_runner.customer_orders c
	join pizza_runner.pizza_names p on p.pizza_id = c.pizza_id
	join pizza_runner.runner_orders r on c.order_id = r.order_id
	WHERE cancellation!='Restaurant Cancellation' AND cancellation!='Customer Cancellation'
	group by p.pizza_name;

5. How many Vegetarian and Meatlovers were ordered by each customer?
	select c.customer_id, p.pizza_name, count(p.pizza_id)
	from customer_orders c
	join pizza_names p 
	on c.pizza_id = p.pizza_id
	group by c.customer_id, p.pizza_name
	order by c.customer_id;
	
6. What was the maximum number of pizzas delivered in a single order?
	select c.order_id, count(p.pizza_id)
	from pizza_runner.customer_orders c
	join pizza_runner.pizza_names p 
	on c.pizza_id = p.pizza_id
	join pizza_runner.runner_orders r
	on r.order_id = c.order_id
	where r.distance > 0
	group by c.order_id
	order by c.order_id;

7. For each customer, how many delivered pizzas had at least 1 change and how many had no changes?
select c.customer_id,
sum(
	CASE WHEN c.exclusions <> '0' OR c.extras <> '0' THEN 1
	ELSE 0
	END) as at_least_1_change,
sum(
	CASE WHEN c.exclusions = '0' OR c.extras = '0' THEN 1
	ELSE 0
	END) as no_change
from pizza_runner.customer_orders c
join pizza_runner.runner_orders r
on c.order_id = r.order_id
where r.distance > 0
group by c.customer_id
order by c.customer_id;
	
8. How many pizzas were delivered that had both exclusions and extras?
	select * from pizza_runner.customer_orders 
	where exclusions != '0' and extras != '0';

9. What was the total volume of pizzas ordered for each hour of the day?

	select EXTRACT(HOUR from order_time) as hour_of_day, count(EXTRACT(HOUR from order_time))
	from pizza_runner.customer_orders
	group by hour_of_day
	order by hour_of_day;

10. What was the volume of orders for each day of the week?
	with week_day as
	(select EXTRACT(DOW from order_time) as day_of_day, 
			count(EXTRACT(HOUR from order_time)) as Total_orders
	from pizza_runner.customer_orders
	group by day_of_day
	order by day_of_day
	)
	select 
		CASE 
			WHEN week_day.day_of_day = 1 THEN 'Sunday'
			WHEN week_day.day_of_day = 2 THEN 'Monday'
			WHEN week_day.day_of_day = 3 THEN 'Tueday'
			WHEN week_day.day_of_day = 4 THEN 'Wednesday'
			WHEN week_day.day_of_day = 5 THEN 'Thursday'
			WHEN week_day.day_of_day = 6 THEN 'Friday'
			ELSE 'Saturday'
		END as WeekDay,
		Total_Orders
	from week_day;
--------------------------------------------------------------------------------------------------------------------------------------
B. Runner and Customer Experience:
----------------------------------
1. How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)
WITH CTE AS
	(SELECT COUNT(runner_id) AS "No. of runners signed up for 1st week period(2020-12-31 to 2021-01-08)" 
	 FROM pizza_runner.runners
	 WHERE registration_date BETWEEN '2020-12-31' AND '2021-01-08') 
,CTE1 AS
	(SELECT COUNT(runner_id) AS "No. of runners signed up for 2nd week period(2021-01-08 AND 2021-01-14)" 
	 FROM pizza_runner.runners
	 WHERE registration_date BETWEEN '2021-01-08' AND '2021-01-14') 
SELECT * 
FROM CTE
NATURAL JOIN CTE1;

2. What was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pickup the order?
with cte_avg_time as
(select runner_id, 
 		pickup_time-order_time as "time_taken"
 from pizza_runner.runner_orders r
 join pizza_runner.customer_orders c
 on r.order_id = c.order_id
 where r.cancellation = '0')
select runner_id,
       avg(time_taken) as "avg time taken"
from cte_avg_time
group by runner_id

3. Is there any relationship between the number of pizzas and how long the order takes to prepare?
with pizza_count as
(
	select order_id, customer_id, count(order_id) as Total_Pizzas
	from pizza_runner.customer_orders
	group by order_id, customer_id
	order by order_id
)
select p.order_id, p.customer_id, p.total_pizzas, r.distance, r.duration
from pizza_count p
join pizza_runner.runner_orders r
on p.order_id = r.order_id

An order with maximum pizza count which is 23.4 KM away took 40 mins to deliver. 
Also an order which contain 1 pizza with 25 km distance took 25 mis and 1 pizza with 20 kn took 32 mins. 
So only the pizza count does not play a role in delivering the order.

4. What was the average distance travelled for each customer?
select customer_id,
	   round(avg(distance), 2) as "Average distance Travelled"
from pizza_runner.customer_orders c
join pizza_runner.runner_orders r
on c.order_id = r.order_id
group by c.customer_id

5. What was the difference between the longest and shortest delivery times for all orders?
select MIN(duration) as "shortest delivery",
	   MAX(duration) as "longest delivery"
from pizza_runner.runner_orders
where cancellation ='0'

6. What was the average speed for each runner for each delivery and do you notice any trend for these values?
SELECT runner_id,
ROUND(AVG(distance/NULLIF(duration, 0)),2)AS "Average speed" 
FROM pizza_runner.runner_orders
GROUP BY runner_id
ORDER BY runner_id;

7. What is the successful delivery percentage for each runner?
with successful_order as
(
	select runner_id, count(runner_id) total_successful_order
	from pizza_runner.runner_orders
	where duration > 0
	group by runner_id
	order by runner_id
),
total_order as
(
	select runner_id, count(runner_id) as total_order
	from pizza_runner.runner_orders
	group by runner_id
	order by runner_id
)
select s.runner_id, t.total_order, s.total_successful_order, 
	   (cast(s.total_successful_order as DOUBLE PRECISION)/cast(t.total_order as DOUBLE PRECISION))*100 success_percentage
from successful_order s
join total_order t
on s.runner_id = t.runner_id;
--------------------------------------------------------------------------------------------------------------------------------------
C. Ingredient Optimisation
----------------------------------
1. What are the standard ingredients for each pizza?
SELECT DISTINCT(pizza_name),
toppings
FROM pizza_runner.pizza_names AS pn
NATURAL JOIN pizza_runner.pizza_recipes AS pr;

2. What was the most commonly added extra?
with added_extras as
(
	select order_id,
	cast(regexp_split_to_table(extras, E',') as INTEGER) as extras
	from pizza_runner.customer_orders
)
select extras, count(extras) as mostly_added_extras
from added_extras
where extras <> 0
group by extras
order by mostly_added_extras desc;

3. What was the most common exclusion?
with exclusions_data as
(
	select order_id,
	cast(regexp_split_to_table(exclusions, E',') as INTEGER) as exclusions
	from pizza_runner.customer_orders
)
select exclusions, count(exclusions) as mostly_excluded_ingredient
from exclusions_data
where exclusions <> 0
group by exclusions
order by mostly_excluded_ingredient desc

4. Generate an order item for each record in the customers_orders table in the format of one of the following:
	Meat Lovers
	Meat Lovers - Exclude Beef
	Meat Lovers - Extra Bacon
	Meat Lovers - Exclude Cheese, Bacon - Extra Mushroom, Peppers

SELECT order_id,
pizza_name,
CASE
	WHEN extras='0' THEN ''
	WHEN extras='1' THEN 'Extra Bacon'
	WHEN extras='2' THEN 'Extra BBQ Sauce'
	WHEN extras='3' THEN 'Extra Beef'
	WHEN extras='4' THEN 'Extra Cheese'
	WHEN extras='5' THEN 'Extra Chicken'
	WHEN extras='6' THEN 'Extra Mushrooms'
	WHEN extras='7' THEN 'Extra Onions'
	WHEN extras='8' THEN 'Extra Pepperoni'
	WHEN extras='9' THEN 'Extra Peppers'
	WHEN extras='10' THEN 'Extra Salami'
	WHEN extras='11' THEN 'Extra Tomatoes'
	WHEN extras='12' THEN 'Tomato Sauce'
	WHEN extras='1, 5' THEN 'Extra Bacon, Chicken'
	WHEN extras='1, 4' THEN 'Extra Bacon, Cheese'
END extras,
CASE 
	WHEN exclusions = '4' THEN 'Exclude Cheese'
	WHEN exclusions = '2, 6' THEN 'Exclude BBQ Sauce, Mushrooms'
	ELSE ''
END exclusions
FROM pizza_runner.customer_orders
NATURAL JOIN pizza_runner.pizza_names
ORDER BY order_id ;


5. Generate an alphabetically ordered comma separated ingredient list for each pizza order from the customer_orders table and add a 2x in front of any relevant ingredients
   For example: "Meat Lovers: 2xBacon, Beef, ... , Salami"
   
SELECT order_id,
pizza_name,
CASE
	WHEN pizza_id=1 AND (extras='0') AND (exclusions='0') THEN 'Bacon, BBQ Sauce, Beef, Cheese, Chicken, Mushrooms, Pepperoni, Salami'
	WHEN pizza_id=2 AND (extras='0') AND (exclusions='0')THEN 'Cheese, Mushrooms, Onions, Peppers, Tomatoes, Tomato Sauce'
	WHEN (pizza_id=2) AND (extras='1') AND (exclusions='0') THEN '2XCheese, Mushrooms, Onions, Peppers, Tomatoes, Tomato Sauce'
	WHEN (pizza_id=1) AND (extras='1') AND (exclusions='0') THEN '2xBacon, BBQ Sauce, Beef, Cheese, Chicken, Mushrooms, Pepperoni, Salami'
	WHEN (pizza_id=1) AND (extras='1, 5') AND (exclusions='4') THEN '2xBacon, BBQ Sauce, Beef, 2xChicken, Mushrooms, Pepperoni, Salami'
	WHEN (pizza_id=1) AND (extras='1, 4') AND (exclusions='2, 6') THEN '2xBacon, Beef, 2xCheese, Chicken, Pepperoni, Salami'
	WHEN pizza_id=1 AND (extras='0') AND (exclusions='4') THEN 'Bacon, BBQ Sauce, Beef, Chicken, Mushrooms, Pepperoni, Salami'
	WHEN pizza_id=2 AND (extras='0') AND (exclusions='4')THEN 'Mushrooms, Onions, Peppers, Tomatoes, Tomato Sauce'
END ingredients,
exclusions
FROM customer_orders
NATURAL JOIN pizza_names
NATURAL JOIN pizza_recipes

6. What is the total quantity of each ingredient used in all delivered pizzas sorted by most frequent first?

--------------------------------------------------------------------------------------------------------------------------------------

D. Pricing and Ratings
----------------------------------
1. If a Meat Lovers pizza costs $12 and Vegetarian costs $10 and there were no charges for changes - how much money has Pizza Runner made so far if there are no delivery fees?
with order_details as
(
	select c.order_id, c.pizza_id, p.pizza_name,
	case when p.pizza_id = 1 then 10
		 else 12
	end as amount
	from pizza_runner.customer_orders c
	join pizza_runner.pizza_names p
	on c.pizza_id = p.pizza_id
	order by c.order_id
),
order_amount as
(
	select od.order_id, ro.runner_id, sum(od.amount) as order_amount
	from order_details od
	join pizza_runner.runner_orders ro
	on od.order_id = ro.order_id
	group by od.order_id, ro.runner_id
)
select runner_id, sum(order_amount)
from order_amount
group by runner_id
order by runner_id


2. What if there was an additional $1 charge for any pizza extras?
	Add cheese is $1 extra
with order_details as
(
	select c.order_id, c.pizza_id, p.pizza_name,
	case when p.pizza_id = 1 then 10
		 else 12
	end as amount,
	case when extras = '1' then 1
		 when length(extras) > 1 then 2
		 else 0
	end as add_amount
	from pizza_runner.customer_orders c
	join pizza_runner.pizza_names p
	on c.pizza_id = p.pizza_id
	order by c.order_id
),
order_amount as
(
	select od.order_id, ro.runner_id, sum(od.amount) + sum(add_amount) as total_order_amount
	from order_details od
	join pizza_runner.runner_orders ro
	on od.order_id = ro.order_id
	--where ro.pickup_time <> 'null'
	group by od.order_id, ro.runner_id
)
select runner_id, count(order_id) total_order, sum(total_order_amount) grand_order_toal 
from order_amount
group by runner_id
order by runner_id

3. The Pizza Runner team now wants to add an additional ratings system that allows customers to rate their runner, 
   how would you design an additional table for this new dataset - generate a schema for this new table and insert your own data for ratings for each 
   successful customer order between 1 to 5.

DROP TABLE IF EXISTS pizza_runner.ratings;
CREATE TABLE pizza_runner.ratings (
  "order_id" INTEGER,
  "rating" DECIMAL
);
INSERT INTO pizza_runner.ratings
  ("order_id", "rating")
VALUES
  (1, 5),
  (2, 5),
  (3, 4.5),
  (4, 5),
  (5, 4),
  (7, 3.5),
  (8, 5),
  (10,4);

select * from pizza_runner.ratings;
 
   
4. Using your newly generated table - can you join all of the information together to form a table which has the following information for successful deliveries?
	* customer_id
	* order_id
	* runner_id
	* rating
	* order_time
	* pickup_time
	* Time between order and pickup
	* Delivery duration
	* Average speed
	* Total number of pizzas
	
WITH CTE AS(
SELECT runner_id,
	ROUND(AVG(distance/NULLIF(duration, 0)),2) AS "Average speed" 
FROM pizza_runner.runner_orders
GROUP BY runner_id
ORDER BY runner_id)
SELECT customer_id, 
	c.order_id,
	runner_id,
	r.rating,
	c.order_time,
	pickup_time,
	pickup_time-order_time AS "Time between order and pickup",
	duration AS "Delivery duration",
	"Average speed"
FROM pizza_runner.customer_orders AS c
NATURAL JOIN pizza_runner.runner_orders 
NATURAL JOIN pizza_runner.ratings AS r
NATURAL JOIN CTE

5. If a Meat Lovers pizza was $12 and Vegetarian $10 fixed prices with no cost for extras and each runner is paid $0.30 per kilometre traveled - 
   how much money does Pizza Runner have left over after these deliveries?

with CTE1 as
(select order_id, runner_id, sum(distance) * 0.5 as "distance covered amount"
 from pizza_runner.runner_orders
 where runner_orders.cancellation != 'Restaurant Cancellation' or runner_orders.cancellation = 'Customer Cancellation'
 group by order_id, runner_id)
select CTE1.runner_id, sum(c.pizza_cost) as "total_amount"
from CTE1
join pizza_runner.customer_orders c
on CTE1.order_id = c.order_id
group by CTE1.runner_id

--------------------------------------------------------------------------------------------------------------------------------------
E. Bonus Questions
----------------------------------
1. If Danny wants to expand his range of pizzas - how would this impact the existing data design? Write an INSERT statement to demonstrate what would happen 
   if a new Supreme pizza with all the toppings was added to the Pizza Runner menu?